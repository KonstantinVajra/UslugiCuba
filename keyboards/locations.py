import os
import csv
from itertools import zip_longest
from functools import lru_cache
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV ---

@lru_cache()
def get_locations_by_kind() -> dict[str, list[dict]]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ data/locations.csv –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –ø–æ —Ç–∏–ø—É (kind).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç lru_cache –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    """
    locations: dict[str, list[dict]] = {
        "airport": [],
        "hotel": [],
        "restaurant": [],
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞
    base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
    file_path = os.path.join(base_dir, "data", "locations.csv")

    try:
        with open(file_path, mode='r', encoding='utf-8') as infile:
            reader = csv.DictReader(infile)
            for row in reader:
                kind = row.get("kind", "").strip().lower()
                if kind in locations:
                    locations[kind].append({
                        "id": row.get("id", "").strip(),
                        "name": row.get("name", "").strip(),
                        "zone": row.get("zone", "").strip().upper(),
                    })
    except FileNotFoundError:
        # –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–∞ –º–æ–∂–Ω–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –¥—Ä—É–≥—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        print(f"Error: locations.csv not found at {file_path}")
        return {}

    return locations

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def chunk_buttons(buttons: list[InlineKeyboardButton], n: int) -> list[list[InlineKeyboardButton]]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ n —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    if not buttons:
        return []
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥—Ä—É–ø–ø–µ
    return [list(filter(None, group)) for group in zip_longest(*([iter(buttons)] * n))]

def create_location_keyboard(prefix: str, location_kind: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ—ë —Ç–∏–ø–∞ (kind).
    """
    locations_data = get_locations_by_kind()
    locations_list = locations_data.get(location_kind, [])

    if not locations_list:
        return InlineKeyboardMarkup(inline_keyboard=[])

    buttons = [
        InlineKeyboardButton(
            text=loc["name"],
            callback_data=f"{prefix}_{location_kind}_{loc['id']}"
        )
        for loc in locations_list
    ]

    # –î–ª—è –æ—Ç–µ–ª–µ–π –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–µ–ª–∞–µ–º 2 –∫–æ–ª–æ–Ω–∫–∏, –¥–ª—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ - 1
    num_columns = 2 if location_kind in ["hotel", "restaurant"] else 1
    keyboard_layout = chunk_buttons(buttons, num_columns)

    return InlineKeyboardMarkup(inline_keyboard=keyboard_layout)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---

def pickup_category_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè® –û—Ç–µ–ª—å", callback_data="pickup_category_hotel")],
            [InlineKeyboardButton(text="üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω", callback_data="pickup_category_restaurant")],
            [InlineKeyboardButton(text="üõ´ –ê—ç—Ä–æ–ø–æ—Ä—Ç", callback_data="pickup_category_airport")],
        ]
    )

def dropoff_category_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ—á–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè® –û—Ç–µ–ª—å", callback_data="dropoff_category_hotel")],
            [InlineKeyboardButton(text="üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω", callback_data="dropoff_category_restaurant")],
            [InlineKeyboardButton(text="üõ¨ –ê—ç—Ä–æ–ø–æ—Ä—Ç", callback_data="dropoff_category_airport")],
        ]
    )

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø–æ —Ç–∏–ø–∞–º –ª–æ–∫–∞—Ü–∏–π ---

def airport_list_keyboard(prefix: str) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤."""
    return create_location_keyboard(prefix, "airport")

def hotel_list_keyboard(prefix: str) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ç–µ–ª–µ–π."""
    return create_location_keyboard(prefix, "hotel")

def restaurant_list_keyboard(prefix: str) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤."""
    return create_location_keyboard(prefix, "restaurant")