# handlers/common/back.py
from __future__ import annotations
import contextlib  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
from typing import Callable, Dict, Any

from aiogram import Router, types
from aiogram.fsm.context import FSMContext

from callbacks.common import BackCb
from services import nav_fsm
from keyboards.common import back_kb  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

router = Router(name="common_back")

# === 1) –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –≤–∞—à–∏ —Ä–µ–Ω–¥–µ—Ä-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —à–∞–≥–æ–≤ ===
# –ö–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å (message: types.Message, state: FSMContext, **kwargs)
# –∏ –∑–∞–Ω–æ–≤–æ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω/–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
async def render_choose_service(message: types.Message, state: FSMContext, **kwargs):  # TODO: –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
    await message.answer("–í—ã –≤ –Ω–∞—á–∞–ª–µ. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∑–∞–Ω–æ–≤–æ.")  # –∑–∞–≥–ª—É—à–∫–∞

SCREEN_RENDERERS: Dict[str, Callable[[types.Message, FSMContext], Any]] = {
    "choose_service": render_choose_service,
    # –ü—Ä–∏–º–µ—Ä—ã, –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã:
    # "choose_from": render_choose_from,
    # "choose_to": render_choose_to,
    # "choose_datetime": render_choose_datetime,
    # "confirm": render_confirm,
}

@router.callback_query(BackCb.filter())
async def on_back(call: types.CallbackQuery, callback_data: BackCb, state: FSMContext):
    snap = await nav_fsm.pop(state)
    if not snap:
        await call.answer("–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç", show_alert=False)
        return

    screen = snap.get("screen")
    args = snap.get("args", {}) or {}

    renderer = SCREEN_RENDERERS.get(screen) or SCREEN_RENDERERS.get("choose_service")

    # —á–∏—Å—Ç–∏–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´–∑–∞–ª–∏–ø–∞–Ω–∏–π¬ª
    with contextlib.suppress(Exception):
        await call.message.edit_reply_markup(reply_markup=None)

    await renderer(call.message, state, **args)
    await call.answer()

# === –ø—Ä–∏–º–µ—Ä —Ä–µ–Ω–¥–µ—Ä–∞ –¥–ª—è —à–∞–≥–∞ "choose_from" (–ø–æ–∫–∞–∂–µ—Ç –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥) ===
async def render_choose_from(message: types.Message, state: FSMContext, from_code: str = "", **kwargs):
    await message.answer(
        f"(–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù) –û—Ç–∫—É–¥–∞ —É–∂–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ: {from_code}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
        reply_markup=back_kb()  # ‚Üê —Ç–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞
    )

# –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–Ω–¥–µ—Ä–æ–≤
SCREEN_RENDERERS.update({
    "choose_from": render_choose_from,
})

async def render_choose_minute(message, state, date: str = "", hour: str = "", **_):
    # –ø—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∏–Ω—É—Ç + ¬´–ù–∞–∑–∞–¥¬ª
    kb = InlineKeyboardBuilder()
    for m in (0, 15, 30, 45):
        kb.button(text=f"{m:02d}", callback_data=f"min:{m:02d}")
    kb.adjust(4)
    kb.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=BackCb().pack()))
    await message.answer(f"üìÖ {date}\n‚è∞ –ß–∞—Å: {hour}\nüïì –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:", reply_markup=kb.as_markup())

SCREEN_RENDERERS.update({
    "choose_minute": render_choose_minute,
})

async def render_choose_hour(message, state, date: str = "", **_):
    # –µ—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Å–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∞–≤—ã —á–∞—Å–æ–≤ ‚Äî –≤—ã–∑–æ–≤–∏ –µ—ë –∑–¥–µ—Å—å
    kb = InlineKeyboardBuilder()
    for h in range(0, 24):
        kb.button(text=f"{h:02d}", callback_data=f"hour:{h:02d}")
    kb.adjust(6)
    kb.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=BackCb().pack()))
    await message.answer(f"üìÖ –î–∞—Ç–∞: {date}\n‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:", reply_markup=kb.as_markup())

SCREEN_RENDERERS.update({
    "choose_hour": render_choose_hour,
})