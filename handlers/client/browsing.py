import logging
from typing import List, Dict, Any

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto

from repositories import vehicle_repo

router = Router()
log = logging.getLogger(__name__)


def format_car_caption(car: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏."""
    price_str = f"${car.get('price_per_hour')}/—á–∞—Å" if car.get('price_per_hour') else car.get('price_details', '–¶–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É')

    caption = (
        f"<b>{car.get('title')}</b>\n\n"
        f"üë• {car.get('seats')} –º–µ—Å—Ç–∞\n"
        f"üíµ {price_str}\n\n"
        f"üìù {car.get('description')}"
    )
    return caption

def get_car_keyboard(
    cars: List[Dict[str, Any]],
    car_index: int,
    photo_index: int
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏."""
    total_cars = len(cars)
    current_car = cars[car_index]
    total_photos = len(current_car.get('photo_file_ids', []))

    nav_buttons = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
    if total_photos > 1:
        prev_photo_idx = (photo_index - 1 + total_photos) % total_photos
        next_photo_idx = (photo_index + 1) % total_photos
        nav_buttons.extend([
            InlineKeyboardButton(text="‚óÄÔ∏è –§–æ—Ç–æ", callback_data=f"photo_{car_index}_{prev_photo_idx}"),
            InlineKeyboardButton(text=f"{photo_index + 1}/{total_photos}", callback_data="noop"),
            InlineKeyboardButton(text="–§–æ—Ç–æ ‚ñ∂Ô∏è", callback_data=f"photo_{car_index}_{next_photo_idx}"),
        ])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º
    if total_cars > 1:
        prev_car_idx = (car_index - 1 + total_cars) % total_cars
        next_car_idx = (car_index + 1) % total_cars
        nav_buttons.append(
            InlineKeyboardButton(text="<< –ü—Ä–µ–¥.", callback_data=f"car_nav_{prev_car_idx}")
        )
        nav_buttons.append(
            InlineKeyboardButton(text="–°–ª–µ–¥. >>", callback_data=f"car_nav_{next_car_idx}")
        )

    keyboard = [
        nav_buttons,
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è –∑–∞–∫–∞–∑–∞", url=f"tg://user?id={current_car.get('provider_tg_id')}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data == "browse_cars")
async def show_cars_handler(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—É—Å–µ–ª—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π."""
    await state.clear()
    cars = await vehicle_repo.get_published_vehicles()
    if not cars:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
        await callback.answer()
        return

    await state.update_data(cars=cars)
    car = cars[0]
    photo_index = 0

    caption = format_car_caption(car)
    keyboard = get_car_keyboard(cars, 0, photo_index)

    await callback.message.answer_photo(
        photo=car["photo_file_ids"][photo_index],
        caption=caption,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

async def update_car_view(callback: CallbackQuery, state: FSMContext, car_index: int, photo_index: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    data = await state.get_data()
    cars = data.get("cars", [])
    car = cars[car_index]

    caption = format_car_caption(car)
    keyboard = get_car_keyboard(cars, car_index, photo_index)
    media = InputMediaPhoto(media=car["photo_file_ids"][photo_index], caption=caption, parse_mode="HTML")

    await callback.message.edit_media(media=media, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("car_nav_"))
async def car_navigation_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏."""
    car_index = int(callback.data.split("_")[-1])
    await update_car_view(callback, state, car_index, photo_index=0)

@router.callback_query(F.data.startswith("photo_"))
async def photo_navigation_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏."""
    _, car_index_str, photo_index_str = callback.data.split("_")
    await update_car_view(callback, state, int(car_index_str), int(photo_index_str))

@router.callback_query(F.data == "noop")
async def noop_handler(callback: CallbackQuery):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫-—Å—á–µ—Ç—á–∏–∫–æ–≤."""
    await callback.answer()