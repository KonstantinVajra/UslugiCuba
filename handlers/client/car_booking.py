import logging
from typing import List, Dict, Any

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto

from config import ADMIN_CHAT_ID
from repositories import vehicle_repo, user_repo, order_repo

router = Router()
log = logging.getLogger(__name__)

class CarBooking(StatesGroup):
    entering_comment = State()
    confirming_order = State()

# --- Helper Functions for Keyboards and Captions ---

def format_car_caption(car: Dict[str, Any], detailed: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏."""
    caption = f"<b>{car.get('make')} {car.get('model')} ({car.get('year')})</b>\n"
    caption += f"<i>–í–ª–∞–¥–µ–ª–µ—Ü: {car.get('provider_name', 'N/A')}</i>\n\n"

    if detailed:
        caption += (
            f"<b>–¶–≤–µ—Ç:</b> {car.get('color', '-')}\n"
            f"<b>–î–≤–∏–≥–∞—Ç–µ–ª—å:</b> {car.get('engine', '-')}\n"
            f"<b>–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è:</b> {car.get('transmission', '-')}\n"
            f"<b>–¢–æ–ø–ª–∏–≤–æ:</b> {car.get('fuel', '-')}\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{car.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.')}\n\n"
        )
    caption += f"<b>–¶–µ–Ω–∞: ${car.get('price', 0):.2f}/—á–∞—Å</b>"
    return caption

def get_car_keyboard(cars: List[Dict[str, Any]], current_index: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π."""
    total_cars = len(cars)
    car_id = cars[current_index]['id']

    nav_buttons = []
    if total_cars > 1:
        prev_index = (current_index - 1 + total_cars) % total_cars
        next_index = (current_index + 1) % total_cars
        nav_buttons.extend([
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"car_nav_{prev_index}"),
            InlineKeyboardButton(text=f"{current_index + 1}/{total_cars}", callback_data="car_noop"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"car_nav_{next_index}"),
        ])

    buttons = [
        nav_buttons,
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"car_details_{current_index}")],
        [InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data=f"car_select_{car_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_detailed_car_keyboard(current_index: int, car_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"car_back_{current_index}")],
        [InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data=f"car_select_{car_id}")]
    ])

# --- Carousel and Details Handlers ---

@router.callback_query(F.data == "show_cars")
async def show_cars_handler(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—É—Å–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π."""
    await state.clear()
    cars = await vehicle_repo.get_approved_vehicles()
    if not cars:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
        await callback.answer()
        return

    await state.update_data(cars=cars)
    car = cars[0]
    caption = format_car_caption(car)
    keyboard = get_car_keyboard(cars, 0)

    await callback.message.answer_photo(photo=car["photo_url"], caption=caption, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("car_nav_"))
async def car_navigation_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∫–∞—Ä—É—Å–µ–ª–∏."""
    current_index = int(callback.data.split("_")[-1])
    data = await state.get_data()
    cars = data.get("cars", [])
    car = cars[current_index]

    caption = format_car_caption(car)
    keyboard = get_car_keyboard(cars, current_index)
    media = InputMediaPhoto(media=car["photo_url"], caption=caption, parse_mode="HTML")

    await callback.message.edit_media(media=media, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("car_details_"))
async def car_details_handler(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ."""
    current_index = int(callback.data.split("_")[-1])
    data = await state.get_data()
    cars = data.get("cars", [])
    car = cars[current_index]

    caption = format_car_caption(car, detailed=True)
    keyboard = get_detailed_car_keyboard(current_index, car['id'])

    await callback.message.edit_caption(caption=caption, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("car_back_"))
async def car_back_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∫–∞—Ä—É—Å–µ–ª–∏ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    current_index = int(callback.data.split("_")[-1])
    data = await state.get_data()
    cars = data.get("cars", [])
    car = cars[current_index]

    caption = format_car_caption(car)
    keyboard = get_car_keyboard(cars, current_index)

    await callback.message.edit_caption(caption=caption, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "car_noop")
async def car_noop_handler(callback: CallbackQuery):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—á–µ—Ç—á–∏–∫–æ–º."""
    await callback.answer()

# --- Car Booking FSM ---

@router.callback_query(F.data.startswith("car_select_"))
async def select_car_handler(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å."""
    vehicle_id = int(callback.data.split("_")[-1])
    await state.update_data(vehicle_id=vehicle_id)

    await state.set_state(CarBooking.entering_comment)
    await callback.message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –ø–æ–¥–∞—á–∏).",
        reply_markup=ReplyKeyboardRemove()
    )
    await callback.answer()

@router.message(CarBooking.entering_comment)
async def process_comment(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–∫–∞–∑."""
    await state.update_data(client_comment=message.text)

    data = await state.get_data()
    vehicle_id = data.get("vehicle_id")
    vehicle = await vehicle_repo.get_vehicle_by_id(vehicle_id)
    user = await user_repo.get_or_create_user(message.from_user.id)

    order_details = {
        "client_user_id": user['id'],
        "provider_id": vehicle['provider_id'],
        "service_id": 1, # –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ, —Ç.–∫. —É—Å–ª—É–≥–∞ –ø–æ–∫–∞ –æ–¥–Ω–∞
        "vehicle_id": vehicle_id,
        "price": vehicle['price'],
        "client_comment": data.get("client_comment")
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    order_id = await order_repo.create_order(order_details)
    if not order_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É/–ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
    provider_user = await user_repo.get_user_by_id(vehicle['provider_id']) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ—Å—Ç—å
    provider_tg_id = provider_user.get('tg_id') if provider_user else ADMIN_CHAT_ID

    notification_text = (
        f"üöò <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ê–í–¢–û ‚Ññ{order_id}</b> üöò\n\n"
        f"<b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {vehicle.get('make')} {vehicle.get('model')} ({vehicle.get('year')})\n"
        f"<b>–¶–µ–Ω–∞:</b> ${vehicle.get('price'):.2f}/—á–∞—Å\n\n"
        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞:</b>\n{order_details['client_comment']}\n\n"
        f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º: tg://user?id={message.from_user.id}"
    )

    try:
        await bot.send_message(provider_tg_id, notification_text, parse_mode="HTML")
    except Exception as e:
        log.error("Failed to send notification to provider %s: %s", provider_tg_id, e)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É, –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –Ω–µ —É—à–ª–æ
        await bot.send_message(ADMIN_CHAT_ID, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞. {notification_text}", parse_mode="HTML")

    await message.answer(
        "‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
        "–í–ª–∞–¥–µ–ª–µ—Ü –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!",
        parse_mode="HTML"
    )
    await state.clear()