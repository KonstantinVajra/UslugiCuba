import logging
from typing import Dict, Any
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from config import ADMIN_IDS
from states.admin_states import AddVehicleAdmin
from repositories import user_repo, vehicle_repo

router = Router()
log = logging.getLogger(__name__)

# --- –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
class AdminFilter(F):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in ADMIN_IDS

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã ---
@router.message(Command("cancel"), AdminFilter())
@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞", AdminFilter())
async def cancel_handler(message: Message, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω—É –æ—Ç–º–µ–Ω–∏—Ç—å –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."""
    current_state = await state.get_state()
    if current_state is None:
        return

    log.info("Admin %d cancelled state %r", message.from_user.id, current_state)
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())

# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ ---
@router.message(Command("addcard"), AdminFilter())
async def cmd_add_card(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    await state.clear()
    await state.set_state(AddVehicleAdmin.entering_provider_tg_id)
    await message.answer(
        "–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∫–∞—Ä—Ç–æ—á–∫–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /cancel."
    )

@router.message(AddVehicleAdmin.entering_provider_tg_id)
async def process_provider_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ID –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ."""
    if not message.text.isdigit():
        await message.answer("Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(provider_tg_id=int(message.text))
    await state.set_state(AddVehicleAdmin.uploading_photos)
    await state.update_data(photo_file_ids=[]) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–æ—Ç–æ

    await message.answer(
        "–®–∞–≥ 2/5: –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /done."
    )

@router.message(AddVehicleAdmin.uploading_photos, F.photo)
async def process_photos(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    data = await state.get_data()
    photo_file_ids = data.get("photo_file_ids", [])

    if len(photo_file_ids) >= 5:
        await message.answer("–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (5). –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return

    photo_file_ids.append(message.photo[-1].file_id)
    await state.update_data(photo_file_ids=photo_file_ids)
    await message.answer(f"–§–æ—Ç–æ {len(photo_file_ids)}/5 –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–Ω–æ –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

@router.message(AddVehicleAdmin.uploading_photos, Command("done"))
async def done_uploading_photos(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ."""
    data = await state.get_data()
    if not data.get("photo_file_ids"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return

    await state.set_state(AddVehicleAdmin.entering_title)
    await message.answer("–®–∞–≥ 3/5: –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Chevrolet Bel Air, 1957, –±–µ–ª—ã–π').")

@router.message(AddVehicleAdmin.entering_title)
async def process_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."""
    await state.update_data(title=message.text)
    await state.set_state(AddVehicleAdmin.choosing_parameters)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="2", callback_data="param_seats_2"),
            InlineKeyboardButton(text="4", callback_data="param_seats_4"),
            InlineKeyboardButton(text="5+", callback_data="param_seats_5")
        ]
    ])
    await message.answer("–®–∞–≥ 4/5: –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç.", reply_markup=keyboard)

@router.callback_query(F.data.startswith("param_seats_"))
async def process_seats(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—É."""
    seats = int(callback.data.split("_")[-1])
    await state.update_data(seats=seats)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="35$", callback_data="param_price_35"),
            InlineKeyboardButton(text="50$", callback_data="param_price_50"),
            InlineKeyboardButton(text="75$", callback_data="param_price_75"),
        ],
        [InlineKeyboardButton(text="–ü–æ –∑–∞–ø—Ä–æ—Å—É", callback_data="param_price_request")]
    ])
    await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —á–∞—Å.", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("param_price_"))
async def process_price(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–Ω—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ."""
    price_data = callback.data.split("_")[-1]
    if price_data.isdigit():
        await state.update_data(price_per_hour=int(price_data), price_details=None)
    else:
        await state.update_data(price_per_hour=None, price_details="–ü–æ –∑–∞–ø—Ä–æ—Å—É")

    await state.set_state(AddVehicleAdmin.entering_description)
    await callback.message.edit_text("–®–∞–≥ 5/5: –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).")
    await callback.answer()

@router.message(AddVehicleAdmin.entering_description, F.text)
async def process_description_and_show_preview(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç–æ—á–∫–∏."""
    if len(message.text) > 200:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    await state.update_data(description=message.text)

    data = await state.get_data()

    price_str = f"${data.get('price_per_hour')}/—á–∞—Å" if data.get('price_per_hour') else data.get('price_details', '–¶–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É')

    caption = (
        f"<b>{data.get('title')}</b>\n\n"
        f"üë• {data.get('seats')} –º–µ—Å—Ç–∞\n"
        f"üíµ {price_str}\n"
        f"üìù {data.get('description')}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data="finish_add_vehicle_pending_moderation")],
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data="finish_add_vehicle_draft")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_add_vehicle")]
    ])

    await message.answer_photo(
        photo=data['photo_file_ids'][0],
        caption=caption,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AddVehicleAdmin.confirming_vehicle)

@router.callback_query(AddVehicleAdmin.confirming_vehicle, F.data.startswith("finish_add_vehicle_"))
async def finish_vehicle_creation(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º."""
    action = callback.data.split("_")[-1]

    status = action  # 'draft' –∏–ª–∏ 'pending_moderation'
    vehicle_data = await state.get_data()

    provider_tg_id = vehicle_data.get("provider_tg_id")
    provider = await user_repo.get_or_create_provider(provider_tg_id)

    if not provider:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram ID.")
        await state.clear()
        await callback.answer()
        return

    new_vehicle = await vehicle_repo.add_vehicle(provider['id'], vehicle_data, status)

    if new_vehicle:
        await callback.message.edit_text(
            f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ <b>{provider['name']}</b> (ID: {provider['id']}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º <b>{status}</b>."
        )
    else:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    await state.clear()
    await callback.answer()

@router.callback_query(AddVehicleAdmin.confirming_vehicle, F.data == "cancel_add_vehicle")
async def cancel_from_preview(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()